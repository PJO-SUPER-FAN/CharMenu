// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_CharMenu
#include <CharMenu.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_413b220edf8d734a_26_new,"CharMenu","new",0x6f30cf27,"CharMenu.new","CharMenu.hx",26,0xc5f39229)
static const int _hx_array_data_7c6aafb5_1[] = {
	(int)0,(int)0,
};
static const ::String _hx_array_data_7c6aafb5_2[] = {
	HX_("BG3",ce,52,32,00),
};
static const ::String _hx_array_data_7c6aafb5_3[] = {
	HX_("Torch the Dragon",c6,1a,df,1c),
};
static const ::String _hx_array_data_7c6aafb5_4[] = {
	HX_("torch",fc,d0,30,14),
};
static const int _hx_array_data_7c6aafb5_5[] = {
	(int)0,(int)0,
};
static const int _hx_array_data_7c6aafb5_6[] = {
	(int)10,(int)-10,
};
static const int _hx_array_data_7c6aafb5_7[] = {
	(int)50,(int)-10,
};
static const ::String _hx_array_data_7c6aafb5_8[] = {
	HX_("BG2",cd,52,32,00),HX_("BG2",cd,52,32,00),HX_("BG1",cc,52,32,00),
};
static const ::String _hx_array_data_7c6aafb5_9[] = {
	HX_("Boyfriend.XML",93,50,95,7f),HX_("Boyfriend but Christmas",6d,3a,dd,28),HX_("Pico",05,15,31,35),
};
static const ::String _hx_array_data_7c6aafb5_10[] = {
	HX_("bf",c4,55,00,00),HX_("bf-christmas",79,02,f4,24),HX_("pico",e5,e8,57,4a),
};
HX_LOCAL_STACK_FRAME(_hx_pos_413b220edf8d734a_65_create,"CharMenu","create",0x266e9e95,"CharMenu.create","CharMenu.hx",65,0xc5f39229)
static const bool _hx_array_data_7c6aafb5_13[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_413b220edf8d734a_151_update,"CharMenu","update",0x3164bda2,"CharMenu.update","CharMenu.hx",151,0xc5f39229)
HX_LOCAL_STACK_FRAME(_hx_pos_413b220edf8d734a_184_update,"CharMenu","update",0x3164bda2,"CharMenu.update","CharMenu.hx",184,0xc5f39229)
HX_LOCAL_STACK_FRAME(_hx_pos_413b220edf8d734a_206_addCharImageOffset,"CharMenu","addCharImageOffset",0x8bf19a10,"CharMenu.addCharImageOffset","CharMenu.hx",206,0xc5f39229)
HX_LOCAL_STACK_FRAME(_hx_pos_413b220edf8d734a_213_changeSelection,"CharMenu","changeSelection",0xc6b92603,"CharMenu.changeSelection","CharMenu.hx",213,0xc5f39229)
HX_LOCAL_STACK_FRAME(_hx_pos_413b220edf8d734a_246_charCheck,"CharMenu","charCheck",0x99edf019,"CharMenu.charCheck","CharMenu.hx",246,0xc5f39229)

void CharMenu_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_413b220edf8d734a_26_new)
HXLINE(  62)		this->ifCharsAreUnlocked = ( (::Array< bool >)(::flixel::FlxG_obj::save->data->__Field(HX_("daUnlockedChars",fd,47,3b,d5),::hx::paccDynamic)) );
HXLINE(  61)		this->doesntExist = false;
HXLINE(  60)		this->alreadySelected = false;
HXLINE(  56)		this->imageArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  51)		this->curSelected = 0;
HXLINE(  48)		this->sharedImagesFolder = HX_("assets/shared/images/",19,67,ce,1e);
HXLINE(  47)		this->fontFolder = HX_("assets/fonts/",37,ff,a5,9c);
HXLINE(  46)		this->backgroundFolder = HX_("background",ee,93,1d,26);
HXLINE(  43)		this->unlockedOffsets = ( (::Array< ::Dynamic>)(::flixel::FlxG_obj::save->data->__Field(HX_("unlockedOffsets",9d,17,7c,17),::hx::paccDynamic)) );
HXLINE(  42)		this->unlockedCharactersBGs = ( (::Array< ::String >)(::flixel::FlxG_obj::save->data->__Field(HX_("unlockedCharsBGs",94,a9,d1,8f),::hx::paccDynamic)) );
HXLINE(  41)		this->unlockedCharactersNames = ( (::Array< ::String >)(::flixel::FlxG_obj::save->data->__Field(HX_("unlockedCharsNames",ae,83,b8,60),::hx::paccDynamic)) );
HXLINE(  40)		this->unlockedCharacters = ( (::Array< ::String >)(::flixel::FlxG_obj::save->data->__Field(HX_("unlockedChars",ba,f9,53,97),::hx::paccDynamic)) );
HXLINE(  37)		this->unlockableCharsOffsets = ::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< int >::fromData( _hx_array_data_7c6aafb5_1,2));
HXLINE(  36)		this->unlockableCharsBGs = ::Array_obj< ::String >::fromData( _hx_array_data_7c6aafb5_2,1);
HXLINE(  35)		this->unlockableCharsNames = ::Array_obj< ::String >::fromData( _hx_array_data_7c6aafb5_3,1);
HXLINE(  34)		this->unlockableChars = ::Array_obj< ::String >::fromData( _hx_array_data_7c6aafb5_4,1);
HXLINE(  31)		this->charOffsets = ::Array_obj< ::Dynamic>::__new(3)->init(0,::Array_obj< int >::fromData( _hx_array_data_7c6aafb5_5,2))->init(1,::Array_obj< int >::fromData( _hx_array_data_7c6aafb5_6,2))->init(2,::Array_obj< int >::fromData( _hx_array_data_7c6aafb5_7,2));
HXLINE(  30)		this->selectableCharactersBGs = ::Array_obj< ::String >::fromData( _hx_array_data_7c6aafb5_8,3);
HXLINE(  29)		this->selectableCharactersNames = ::Array_obj< ::String >::fromData( _hx_array_data_7c6aafb5_9,3);
HXLINE(  28)		this->selectableCharacters = ::Array_obj< ::String >::fromData( _hx_array_data_7c6aafb5_10,3);
HXLINE(  26)		super::__construct(TransIn,TransOut);
            	}

Dynamic CharMenu_obj::__CreateEmpty() { return new CharMenu_obj; }

void *CharMenu_obj::_hx_vtable = 0;

Dynamic CharMenu_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharMenu_obj > _hx_result = new CharMenu_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CharMenu_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x2edd87d9) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2edd87d9;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CharMenu_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_413b220edf8d734a_65_create)
HXLINE(  67)		if (::hx::IsNull( this->ifCharsAreUnlocked )) {
HXLINE(  69)			this->ifCharsAreUnlocked = ::Array_obj< bool >::fromData( _hx_array_data_7c6aafb5_13,1);
HXLINE(  70)			::flixel::FlxG_obj::save->data->__SetField(HX_("daUnlockedChars",fd,47,3b,d5),this->ifCharsAreUnlocked,::hx::paccDynamic);
            		}
HXLINE(  73)		if (::hx::IsNull( this->unlockedCharacters )) {
HXLINE(  75)			this->unlockedCharacters = this->selectableCharacters;
HXLINE(  76)			::flixel::FlxG_obj::save->data->__SetField(HX_("unlockedChars",ba,f9,53,97),this->unlockedCharacters,::hx::paccDynamic);
            		}
HXLINE(  79)		if (::hx::IsNull( this->unlockedCharactersNames )) {
HXLINE(  81)			this->unlockedCharactersNames = this->selectableCharactersNames;
HXLINE(  82)			::flixel::FlxG_obj::save->data->__SetField(HX_("unlockedCharsNames",ae,83,b8,60),this->unlockedCharactersNames,::hx::paccDynamic);
            		}
HXLINE(  85)		if (::hx::IsNull( this->unlockedCharactersBGs )) {
HXLINE(  87)			this->unlockedCharactersBGs = this->selectableCharactersBGs;
HXLINE(  88)			::flixel::FlxG_obj::save->data->__SetField(HX_("unlockedCharsBGs",94,a9,d1,8f),this->unlockedCharactersBGs,::hx::paccDynamic);
            		}
HXLINE(  91)		if (::hx::IsNull( this->unlockedOffsets )) {
HXLINE(  93)			this->unlockedOffsets = this->charOffsets;
HXLINE(  94)			::flixel::FlxG_obj::save->data->__SetField(HX_("unlockedOffests",79,ba,45,0e),this->unlockedOffsets,::hx::paccDynamic);
            		}
HXLINE(  98)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  98)		 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(this->unlockedCharactersBGs->__get(this->curSelected),this->backgroundFolder);
HXDLIN(  98)		this->menuBG = _hx_tmp->loadGraphic(returnAsset,null(),null(),null(),null(),null());
HXLINE(  99)		 ::flixel::FlxSprite _hx_tmp1 = this->menuBG;
HXDLIN(  99)		_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->menuBG->get_width() * ((Float)1.1))),null());
HXLINE( 100)		this->menuBG->updateHitbox();
HXLINE( 101)		{
HXLINE( 101)			 ::flixel::FlxSprite _this = this->menuBG;
HXDLIN( 101)			int axes = 17;
HXDLIN( 101)			bool _hx_tmp2;
HXDLIN( 101)			if ((axes != 1)) {
HXLINE( 101)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 101)				_hx_tmp2 = true;
            			}
HXDLIN( 101)			if (_hx_tmp2) {
HXLINE( 101)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 101)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 101)			bool _hx_tmp3;
HXDLIN( 101)			if ((axes != 16)) {
HXLINE( 101)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE( 101)				_hx_tmp3 = true;
            			}
HXDLIN( 101)			if (_hx_tmp3) {
HXLINE( 101)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 101)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 102)		this->menuBG->set_antialiasing(true);
HXLINE( 103)		this->add(this->menuBG);
HXLINE( 104)		this->grpMenu =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 105)		this->add(this->grpMenu);
HXLINE( 106)		this->grpMenuImages =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 107)		this->add(this->grpMenuImages);
HXLINE( 110)		{
HXLINE( 110)			int _g = 0;
HXDLIN( 110)			int _g1 = this->unlockedCharacters->length;
HXDLIN( 110)			while((_g < _g1)){
HXLINE( 110)				_g = (_g + 1);
HXDLIN( 110)				int i = (_g - 1);
HXLINE( 112)				 ::Alphabet characterText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(170) ),( (Float)(((70 * i) + 230)) ),this->unlockedCharacters->__get(i),true);
HXLINE( 113)				characterText->isMenuItem = true;
HXLINE( 114)				characterText->targetY = i;
HXLINE( 115)				this->grpMenu->add(characterText).StaticCast<  ::Alphabet >();
HXLINE( 117)				 ::Boyfriend characterImage =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),this->unlockedCharacters->__get(i));
HXLINE( 118)				{
HXLINE( 118)					 ::flixel::math::FlxBasePoint this1 = characterImage->scale;
HXDLIN( 118)					this1->set_x(((Float)0.8));
HXDLIN( 118)					this1->set_y(((Float)0.8));
            				}
HXLINE( 119)				this->addCharImageOffset(characterImage,this->unlockedOffsets->__get(i).StaticCast< ::Array< int > >()->__get(0),this->unlockedOffsets->__get(i).StaticCast< ::Array< int > >()->__get(1));
HXLINE( 122)				{
HXLINE( 122)					int axes = 17;
HXDLIN( 122)					bool _hx_tmp;
HXDLIN( 122)					if ((axes != 1)) {
HXLINE( 122)						_hx_tmp = (axes == 17);
            					}
            					else {
HXLINE( 122)						_hx_tmp = true;
            					}
HXDLIN( 122)					if (_hx_tmp) {
HXLINE( 122)						int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 122)						characterImage->set_x(((( (Float)(_hx_tmp) ) - characterImage->get_width()) / ( (Float)(2) )));
            					}
HXDLIN( 122)					bool _hx_tmp1;
HXDLIN( 122)					if ((axes != 16)) {
HXLINE( 122)						_hx_tmp1 = (axes == 17);
            					}
            					else {
HXLINE( 122)						_hx_tmp1 = true;
            					}
HXDLIN( 122)					if (_hx_tmp1) {
HXLINE( 122)						int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 122)						characterImage->set_y(((( (Float)(_hx_tmp) ) - characterImage->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE( 123)				this->imageArray->push(characterImage);
HXLINE( 124)				this->add(characterImage);
            			}
            		}
HXLINE( 128)		 ::Alphabet selectionHeader =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(50) ),HX_("Character Select",d3,1e,ae,df),true);
HXLINE( 129)		{
HXLINE( 129)			int axes1 = 1;
HXDLIN( 129)			bool _hx_tmp4;
HXDLIN( 129)			if ((axes1 != 1)) {
HXLINE( 129)				_hx_tmp4 = (axes1 == 17);
            			}
            			else {
HXLINE( 129)				_hx_tmp4 = true;
            			}
HXDLIN( 129)			if (_hx_tmp4) {
HXLINE( 129)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 129)				selectionHeader->set_x(((( (Float)(_hx_tmp) ) - selectionHeader->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 129)			bool _hx_tmp5;
HXDLIN( 129)			if ((axes1 != 16)) {
HXLINE( 129)				_hx_tmp5 = (axes1 == 17);
            			}
            			else {
HXLINE( 129)				_hx_tmp5 = true;
            			}
HXDLIN( 129)			if (_hx_tmp5) {
HXLINE( 129)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 129)				selectionHeader->set_y(((( (Float)(_hx_tmp) ) - selectionHeader->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 130)		this->add(selectionHeader);
HXLINE( 133)		 ::flixel::FlxSprite arrows =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 133)		 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic(HX_("arrowSelection",43,5d,9f,8d),this->backgroundFolder);
HXDLIN( 133)		 ::flixel::FlxSprite arrows1 = arrows->loadGraphic(returnAsset1,null(),null(),null(),null(),null());
HXLINE( 134)		arrows1->setGraphicSize(::Std_obj::_hx_int((arrows1->get_width() * ((Float)1.1))),null());
HXLINE( 135)		{
HXLINE( 135)			int axes2 = 17;
HXDLIN( 135)			bool _hx_tmp6;
HXDLIN( 135)			if ((axes2 != 1)) {
HXLINE( 135)				_hx_tmp6 = (axes2 == 17);
            			}
            			else {
HXLINE( 135)				_hx_tmp6 = true;
            			}
HXDLIN( 135)			if (_hx_tmp6) {
HXLINE( 135)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 135)				arrows1->set_x(((( (Float)(_hx_tmp) ) - arrows1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 135)			bool _hx_tmp7;
HXDLIN( 135)			if ((axes2 != 16)) {
HXLINE( 135)				_hx_tmp7 = (axes2 == 17);
            			}
            			else {
HXLINE( 135)				_hx_tmp7 = true;
            			}
HXDLIN( 135)			if (_hx_tmp7) {
HXLINE( 135)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 135)				arrows1->set_y(((( (Float)(_hx_tmp) ) - arrows1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 136)		arrows1->set_antialiasing(true);
HXLINE( 137)		this->add(arrows1);
HXLINE( 140)		this->selectedCharName =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),10,0,HX_("",00,00,00,00),32,null());
HXLINE( 141)		this->selectedCharName->setFormat((this->fontFolder + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 142)		this->selectedCharName->set_alpha(((Float)0.7));
HXLINE( 143)		this->add(this->selectedCharName);
HXLINE( 145)		this->changeSelection(null());
HXLINE( 146)		this->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::FlxG_obj::cameras->list->__get((::flixel::FlxG_obj::cameras->list->length - 1)).StaticCast<  ::flixel::FlxCamera >()));
HXLINE( 147)		this->super::create();
            	}


void CharMenu_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_413b220edf8d734a_151_update)
HXLINE( 152)		 ::flixel::text::FlxText _hx_tmp = this->selectedCharName;
HXDLIN( 152)		_hx_tmp->set_text(this->unlockedCharactersNames->__get(this->curSelected).toUpperCase());
HXLINE( 153)		 ::flixel::text::FlxText _hx_tmp1 = this->selectedCharName;
HXDLIN( 153)		int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN( 153)		_hx_tmp1->set_x((( (Float)(_hx_tmp2) ) - (this->selectedCharName->get_width() + 10)));
HXLINE( 154)		if ((this->selectedCharName->text == HX_("",00,00,00,00))) {
HXLINE( 156)			::haxe::Log_obj::trace(HX_("",00,00,00,00),::hx::SourceInfo(HX_("source/CharMenu.hx",b5,bf,bd,11),156,HX_("CharMenu",b5,af,6a,7c),HX_("update",09,86,05,87)));
HXLINE( 157)			this->selectedCharName->set_text(HX_("",00,00,00,00));
            		}
HXLINE( 161)		bool leftPress = ::PlayerSettings_obj::player1->controls->_ui_leftP->check();
HXLINE( 163)		bool rightPress = ::PlayerSettings_obj::player1->controls->_ui_rightP->check();
HXLINE( 165)		bool accepted = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 166)		bool goBack = ::PlayerSettings_obj::player1->controls->_back->check();
HXLINE( 168)		if (!(this->alreadySelected)) {
HXLINE( 170)			if (leftPress) {
HXLINE( 171)				this->changeSelection(-1);
            			}
HXLINE( 172)			if (rightPress) {
HXLINE( 173)				this->changeSelection(1);
            			}
HXLINE( 174)			if (accepted) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_413b220edf8d734a_184_update)
HXLINE( 184)					::MusicBeatState_obj::switchState(::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false));
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 176)				this->alreadySelected = true;
HXLINE( 177)				::String daSelected = this->unlockedCharacters->__get(this->curSelected);
HXLINE( 178)				if ((this->unlockedCharacters->__get(this->curSelected) != HX_("bf",c4,55,00,00))) {
HXLINE( 179)					::PlayState_obj::SONG->__SetField(HX_("player1",b0,09,15,8a),daSelected,::hx::paccDynamic);
            				}
HXLINE( 181)				::flixel::effects::FlxFlicker_obj::flicker(this->imageArray->__get(this->curSelected).StaticCast<  ::Boyfriend >(),0,null(),null(),null(),null(),null());
HXLINE( 182)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0()),null());
            			}
HXLINE( 187)			if (goBack) {
HXLINE( 189)				if (::PlayState_obj::isStoryMode) {
HXLINE( 190)					 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 190)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 190)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				else {
HXLINE( 192)					 ::flixel::FlxState nextState =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 192)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 192)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
HXLINE( 195)			{
HXLINE( 195)				int _g = 0;
HXDLIN( 195)				int _g1 = this->imageArray->length;
HXDLIN( 195)				while((_g < _g1)){
HXLINE( 195)					_g = (_g + 1);
HXDLIN( 195)					int i = (_g - 1);
HXLINE( 197)					this->imageArray->__get(i).StaticCast<  ::Boyfriend >()->dance();
            				}
            			}
HXLINE( 200)			this->super::update(elapsed);
            		}
            	}


void CharMenu_obj::addCharImageOffset( ::Boyfriend image,int xOffset,int yOffset){
            	HX_STACKFRAME(&_hx_pos_413b220edf8d734a_206_addCharImageOffset)
HXLINE( 207)		{
HXLINE( 207)			 ::Boyfriend _g = image;
HXDLIN( 207)			_g->set_x((_g->x + xOffset));
            		}
HXLINE( 208)		{
HXLINE( 208)			 ::Boyfriend _g1 = image;
HXDLIN( 208)			_g1->set_y((_g1->y + yOffset));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(CharMenu_obj,addCharImageOffset,(void))

void CharMenu_obj::changeSelection(::hx::Null< int >  __o_changeAmount){
            		int changeAmount = __o_changeAmount.Default(0);
            	HX_STACKFRAME(&_hx_pos_413b220edf8d734a_213_changeSelection)
HXLINE( 214)		 ::CharMenu _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 214)		_hx_tmp->curSelected = (_hx_tmp->curSelected + changeAmount);
HXLINE( 215)		if ((this->curSelected < 0)) {
HXLINE( 216)			this->curSelected = (this->unlockedCharacters->length - 1);
            		}
HXLINE( 217)		if ((this->curSelected >= this->unlockedCharacters->length)) {
HXLINE( 218)			this->curSelected = 0;
            		}
HXLINE( 220)		{
HXLINE( 220)			int _g = 0;
HXDLIN( 220)			int _g1 = this->imageArray->length;
HXDLIN( 220)			while((_g < _g1)){
HXLINE( 220)				_g = (_g + 1);
HXDLIN( 220)				int i = (_g - 1);
HXLINE( 222)				this->imageArray->__get(i).StaticCast<  ::Boyfriend >()->set_alpha(( (Float)(0) ));
            			}
            		}
HXLINE( 224)		this->imageArray->__get(this->curSelected).StaticCast<  ::Boyfriend >()->set_alpha(( (Float)(1) ));
HXLINE( 226)		int tempInt = 0;
HXLINE( 228)		{
HXLINE( 228)			int _g2 = 0;
HXDLIN( 228)			::Array< ::Dynamic> _g3 = this->grpMenu->members;
HXDLIN( 228)			while((_g2 < _g3->length)){
HXLINE( 228)				 ::Alphabet item = _g3->__get(_g2).StaticCast<  ::Alphabet >();
HXDLIN( 228)				_g2 = (_g2 + 1);
HXLINE( 230)				item->targetY = (tempInt - this->curSelected);
HXLINE( 231)				tempInt = (tempInt + 1);
HXLINE( 233)				item->set_alpha(( (Float)(0) ));
HXLINE( 235)				bool _hx_tmp = (item->targetY == 0);
            			}
            		}
HXLINE( 241)		this->charCheck();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharMenu_obj,changeSelection,(void))

void CharMenu_obj::charCheck(){
            	HX_GC_STACKFRAME(&_hx_pos_413b220edf8d734a_246_charCheck)
HXLINE( 247)		this->doesntExist = false;
HXLINE( 248)		this->remove(this->icon,null());
HXLINE( 250)		this->menuBG->loadGraphic(this->unlockedCharactersBGs->__get(this->curSelected),null(),null(),null(),null(),null());
HXLINE( 252)		this->doesntExist = true;
HXLINE( 254)		 ::flixel::FlxSprite barBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)),null());
HXDLIN( 254)		 ::flixel::FlxSprite barBG1 = barBG->loadGraphic((this->sharedImagesFolder + HX_("healthBar.png",52,4f,de,4f)),null(),null(),null(),null(),null());
HXLINE( 255)		{
HXLINE( 255)			int axes = 1;
HXDLIN( 255)			bool _hx_tmp;
HXDLIN( 255)			if ((axes != 1)) {
HXLINE( 255)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 255)				_hx_tmp = true;
            			}
HXDLIN( 255)			if (_hx_tmp) {
HXLINE( 255)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 255)				barBG1->set_x(((( (Float)(_hx_tmp) ) - barBG1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 255)			bool _hx_tmp1;
HXDLIN( 255)			if ((axes != 16)) {
HXLINE( 255)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE( 255)				_hx_tmp1 = true;
            			}
HXDLIN( 255)			if (_hx_tmp1) {
HXLINE( 255)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 255)				barBG1->set_y(((( (Float)(_hx_tmp) ) - barBG1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 256)		{
HXLINE( 256)			 ::flixel::math::FlxBasePoint this1 = barBG1->scrollFactor;
HXDLIN( 256)			this1->set_x(( (Float)(0) ));
HXDLIN( 256)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 257)		barBG1->set_visible(false);
HXLINE( 258)		this->add(barBG1);
HXLINE( 260)		Float bar = (barBG1->x + 4);
HXDLIN( 260)		Float bar1 = (barBG1->y + 4);
HXDLIN( 260)		int bar2 = ::Std_obj::_hx_int((barBG1->get_width() - ( (Float)(8) )));
HXDLIN( 260)		 ::flixel::ui::FlxBar bar3 =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,bar,bar1,::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn(),bar2,::Std_obj::_hx_int((barBG1->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("health",9c,28,06,fd),0,2,null());
HXLINE( 261)		{
HXLINE( 261)			 ::flixel::math::FlxBasePoint this2 = bar3->scrollFactor;
HXDLIN( 261)			this2->set_x(( (Float)(0) ));
HXDLIN( 261)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 262)		bar3->createFilledBar(-65536,-10027213,null(),null());
HXLINE( 263)		bar3->set_visible(false);
HXLINE( 264)		this->add(bar3);
HXLINE( 266)		this->icon =  ::HealthIcon_obj::__alloc( HX_CTX ,this->unlockedCharacters->__get(this->curSelected),true);
HXLINE( 267)		{
HXLINE( 267)			 ::HealthIcon _this = this->icon;
HXDLIN( 267)			int axes1 = 1;
HXDLIN( 267)			bool _hx_tmp2;
HXDLIN( 267)			if ((axes1 != 1)) {
HXLINE( 267)				_hx_tmp2 = (axes1 == 17);
            			}
            			else {
HXLINE( 267)				_hx_tmp2 = true;
            			}
HXDLIN( 267)			if (_hx_tmp2) {
HXLINE( 267)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 267)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 267)			bool _hx_tmp3;
HXDLIN( 267)			if ((axes1 != 16)) {
HXLINE( 267)				_hx_tmp3 = (axes1 == 17);
            			}
            			else {
HXLINE( 267)				_hx_tmp3 = true;
            			}
HXDLIN( 267)			if (_hx_tmp3) {
HXLINE( 267)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 267)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 268)		this->icon->setGraphicSize(-4,null());
HXLINE( 269)		 ::HealthIcon _hx_tmp4 = this->icon;
HXDLIN( 269)		Float bar4 = bar3->y;
HXDLIN( 269)		_hx_tmp4->set_y(((bar4 - (this->icon->get_height() / ( (Float)(2) ))) - ( (Float)(20) )));
HXLINE( 270)		this->add(this->icon);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharMenu_obj,charCheck,(void))


::hx::ObjectPtr< CharMenu_obj > CharMenu_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CharMenu_obj > __this = new CharMenu_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CharMenu_obj > CharMenu_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CharMenu_obj *__this = (CharMenu_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharMenu_obj), true, "CharMenu"));
	*(void **)__this = CharMenu_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CharMenu_obj::CharMenu_obj()
{
}

void CharMenu_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharMenu);
	HX_MARK_MEMBER_NAME(selectableCharacters,"selectableCharacters");
	HX_MARK_MEMBER_NAME(selectableCharactersNames,"selectableCharactersNames");
	HX_MARK_MEMBER_NAME(selectableCharactersBGs,"selectableCharactersBGs");
	HX_MARK_MEMBER_NAME(charOffsets,"charOffsets");
	HX_MARK_MEMBER_NAME(unlockableChars,"unlockableChars");
	HX_MARK_MEMBER_NAME(unlockableCharsNames,"unlockableCharsNames");
	HX_MARK_MEMBER_NAME(unlockableCharsBGs,"unlockableCharsBGs");
	HX_MARK_MEMBER_NAME(unlockableCharsOffsets,"unlockableCharsOffsets");
	HX_MARK_MEMBER_NAME(unlockedCharacters,"unlockedCharacters");
	HX_MARK_MEMBER_NAME(unlockedCharactersNames,"unlockedCharactersNames");
	HX_MARK_MEMBER_NAME(unlockedCharactersBGs,"unlockedCharactersBGs");
	HX_MARK_MEMBER_NAME(unlockedOffsets,"unlockedOffsets");
	HX_MARK_MEMBER_NAME(backgroundFolder,"backgroundFolder");
	HX_MARK_MEMBER_NAME(fontFolder,"fontFolder");
	HX_MARK_MEMBER_NAME(sharedImagesFolder,"sharedImagesFolder");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(menuBG,"menuBG");
	HX_MARK_MEMBER_NAME(grpMenu,"grpMenu");
	HX_MARK_MEMBER_NAME(grpMenuImages,"grpMenuImages");
	HX_MARK_MEMBER_NAME(imageArray,"imageArray");
	HX_MARK_MEMBER_NAME(selectedCharName,"selectedCharName");
	HX_MARK_MEMBER_NAME(alreadySelected,"alreadySelected");
	HX_MARK_MEMBER_NAME(doesntExist,"doesntExist");
	HX_MARK_MEMBER_NAME(ifCharsAreUnlocked,"ifCharsAreUnlocked");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CharMenu_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(selectableCharacters,"selectableCharacters");
	HX_VISIT_MEMBER_NAME(selectableCharactersNames,"selectableCharactersNames");
	HX_VISIT_MEMBER_NAME(selectableCharactersBGs,"selectableCharactersBGs");
	HX_VISIT_MEMBER_NAME(charOffsets,"charOffsets");
	HX_VISIT_MEMBER_NAME(unlockableChars,"unlockableChars");
	HX_VISIT_MEMBER_NAME(unlockableCharsNames,"unlockableCharsNames");
	HX_VISIT_MEMBER_NAME(unlockableCharsBGs,"unlockableCharsBGs");
	HX_VISIT_MEMBER_NAME(unlockableCharsOffsets,"unlockableCharsOffsets");
	HX_VISIT_MEMBER_NAME(unlockedCharacters,"unlockedCharacters");
	HX_VISIT_MEMBER_NAME(unlockedCharactersNames,"unlockedCharactersNames");
	HX_VISIT_MEMBER_NAME(unlockedCharactersBGs,"unlockedCharactersBGs");
	HX_VISIT_MEMBER_NAME(unlockedOffsets,"unlockedOffsets");
	HX_VISIT_MEMBER_NAME(backgroundFolder,"backgroundFolder");
	HX_VISIT_MEMBER_NAME(fontFolder,"fontFolder");
	HX_VISIT_MEMBER_NAME(sharedImagesFolder,"sharedImagesFolder");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(menuBG,"menuBG");
	HX_VISIT_MEMBER_NAME(grpMenu,"grpMenu");
	HX_VISIT_MEMBER_NAME(grpMenuImages,"grpMenuImages");
	HX_VISIT_MEMBER_NAME(imageArray,"imageArray");
	HX_VISIT_MEMBER_NAME(selectedCharName,"selectedCharName");
	HX_VISIT_MEMBER_NAME(alreadySelected,"alreadySelected");
	HX_VISIT_MEMBER_NAME(doesntExist,"doesntExist");
	HX_VISIT_MEMBER_NAME(ifCharsAreUnlocked,"ifCharsAreUnlocked");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CharMenu_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"menuBG") ) { return ::hx::Val( menuBG ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"grpMenu") ) { return ::hx::Val( grpMenu ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"charCheck") ) { return ::hx::Val( charCheck_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fontFolder") ) { return ::hx::Val( fontFolder ); }
		if (HX_FIELD_EQ(inName,"imageArray") ) { return ::hx::Val( imageArray ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"charOffsets") ) { return ::hx::Val( charOffsets ); }
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"doesntExist") ) { return ::hx::Val( doesntExist ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"grpMenuImages") ) { return ::hx::Val( grpMenuImages ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unlockableChars") ) { return ::hx::Val( unlockableChars ); }
		if (HX_FIELD_EQ(inName,"unlockedOffsets") ) { return ::hx::Val( unlockedOffsets ); }
		if (HX_FIELD_EQ(inName,"alreadySelected") ) { return ::hx::Val( alreadySelected ); }
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backgroundFolder") ) { return ::hx::Val( backgroundFolder ); }
		if (HX_FIELD_EQ(inName,"selectedCharName") ) { return ::hx::Val( selectedCharName ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"unlockableCharsBGs") ) { return ::hx::Val( unlockableCharsBGs ); }
		if (HX_FIELD_EQ(inName,"unlockedCharacters") ) { return ::hx::Val( unlockedCharacters ); }
		if (HX_FIELD_EQ(inName,"sharedImagesFolder") ) { return ::hx::Val( sharedImagesFolder ); }
		if (HX_FIELD_EQ(inName,"ifCharsAreUnlocked") ) { return ::hx::Val( ifCharsAreUnlocked ); }
		if (HX_FIELD_EQ(inName,"addCharImageOffset") ) { return ::hx::Val( addCharImageOffset_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"selectableCharacters") ) { return ::hx::Val( selectableCharacters ); }
		if (HX_FIELD_EQ(inName,"unlockableCharsNames") ) { return ::hx::Val( unlockableCharsNames ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"unlockedCharactersBGs") ) { return ::hx::Val( unlockedCharactersBGs ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"unlockableCharsOffsets") ) { return ::hx::Val( unlockableCharsOffsets ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"selectableCharactersBGs") ) { return ::hx::Val( selectableCharactersBGs ); }
		if (HX_FIELD_EQ(inName,"unlockedCharactersNames") ) { return ::hx::Val( unlockedCharactersNames ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"selectableCharactersNames") ) { return ::hx::Val( selectableCharactersNames ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CharMenu_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::HealthIcon >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"menuBG") ) { menuBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"grpMenu") ) { grpMenu=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fontFolder") ) { fontFolder=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"imageArray") ) { imageArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"charOffsets") ) { charOffsets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"doesntExist") ) { doesntExist=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"grpMenuImages") ) { grpMenuImages=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unlockableChars") ) { unlockableChars=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unlockedOffsets") ) { unlockedOffsets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alreadySelected") ) { alreadySelected=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backgroundFolder") ) { backgroundFolder=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedCharName") ) { selectedCharName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"unlockableCharsBGs") ) { unlockableCharsBGs=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unlockedCharacters") ) { unlockedCharacters=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sharedImagesFolder") ) { sharedImagesFolder=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ifCharsAreUnlocked") ) { ifCharsAreUnlocked=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"selectableCharacters") ) { selectableCharacters=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unlockableCharsNames") ) { unlockableCharsNames=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"unlockedCharactersBGs") ) { unlockedCharactersBGs=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"unlockableCharsOffsets") ) { unlockableCharsOffsets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"selectableCharactersBGs") ) { selectableCharactersBGs=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unlockedCharactersNames") ) { unlockedCharactersNames=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"selectableCharactersNames") ) { selectableCharactersNames=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CharMenu_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("selectableCharacters",e0,6a,bc,4b));
	outFields->push(HX_("selectableCharactersNames",c8,28,a6,38));
	outFields->push(HX_("selectableCharactersBGs",2e,f4,a3,56));
	outFields->push(HX_("charOffsets",4a,f9,e9,fe));
	outFields->push(HX_("unlockableChars",9f,f5,95,7a));
	outFields->push(HX_("unlockableCharsNames",a9,49,22,35));
	outFields->push(HX_("unlockableCharsBGs",cf,6a,1c,eb));
	outFields->push(HX_("unlockableCharsOffsets",a1,bd,4d,a4));
	outFields->push(HX_("unlockedCharacters",ad,3a,3f,52));
	outFields->push(HX_("unlockedCharactersNames",db,f1,bd,31));
	outFields->push(HX_("unlockedCharactersBGs",81,42,0d,28));
	outFields->push(HX_("unlockedOffsets",9d,17,7c,17));
	outFields->push(HX_("backgroundFolder",3c,25,27,c4));
	outFields->push(HX_("fontFolder",dd,0d,e4,ad));
	outFields->push(HX_("sharedImagesFolder",cb,23,a4,1b));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("menuBG",24,65,6d,05));
	outFields->push(HX_("grpMenu",24,54,e5,ff));
	outFields->push(HX_("grpMenuImages",fc,cb,c7,90));
	outFields->push(HX_("imageArray",3e,34,5d,31));
	outFields->push(HX_("selectedCharName",bc,59,88,7a));
	outFields->push(HX_("alreadySelected",13,d6,4b,c5));
	outFields->push(HX_("doesntExist",f8,24,fa,eb));
	outFields->push(HX_("ifCharsAreUnlocked",b7,02,fa,84));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CharMenu_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharMenu_obj,selectableCharacters),HX_("selectableCharacters",e0,6a,bc,4b)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharMenu_obj,selectableCharactersNames),HX_("selectableCharactersNames",c8,28,a6,38)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharMenu_obj,selectableCharactersBGs),HX_("selectableCharactersBGs",2e,f4,a3,56)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CharMenu_obj,charOffsets),HX_("charOffsets",4a,f9,e9,fe)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharMenu_obj,unlockableChars),HX_("unlockableChars",9f,f5,95,7a)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharMenu_obj,unlockableCharsNames),HX_("unlockableCharsNames",a9,49,22,35)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharMenu_obj,unlockableCharsBGs),HX_("unlockableCharsBGs",cf,6a,1c,eb)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CharMenu_obj,unlockableCharsOffsets),HX_("unlockableCharsOffsets",a1,bd,4d,a4)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharMenu_obj,unlockedCharacters),HX_("unlockedCharacters",ad,3a,3f,52)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharMenu_obj,unlockedCharactersNames),HX_("unlockedCharactersNames",db,f1,bd,31)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharMenu_obj,unlockedCharactersBGs),HX_("unlockedCharactersBGs",81,42,0d,28)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CharMenu_obj,unlockedOffsets),HX_("unlockedOffsets",9d,17,7c,17)},
	{::hx::fsString,(int)offsetof(CharMenu_obj,backgroundFolder),HX_("backgroundFolder",3c,25,27,c4)},
	{::hx::fsString,(int)offsetof(CharMenu_obj,fontFolder),HX_("fontFolder",dd,0d,e4,ad)},
	{::hx::fsString,(int)offsetof(CharMenu_obj,sharedImagesFolder),HX_("sharedImagesFolder",cb,23,a4,1b)},
	{::hx::fsInt,(int)offsetof(CharMenu_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(CharMenu_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharMenu_obj,menuBG),HX_("menuBG",24,65,6d,05)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CharMenu_obj,grpMenu),HX_("grpMenu",24,54,e5,ff)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CharMenu_obj,grpMenuImages),HX_("grpMenuImages",fc,cb,c7,90)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CharMenu_obj,imageArray),HX_("imageArray",3e,34,5d,31)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharMenu_obj,selectedCharName),HX_("selectedCharName",bc,59,88,7a)},
	{::hx::fsBool,(int)offsetof(CharMenu_obj,alreadySelected),HX_("alreadySelected",13,d6,4b,c5)},
	{::hx::fsBool,(int)offsetof(CharMenu_obj,doesntExist),HX_("doesntExist",f8,24,fa,eb)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(CharMenu_obj,ifCharsAreUnlocked),HX_("ifCharsAreUnlocked",b7,02,fa,84)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CharMenu_obj_sStaticStorageInfo = 0;
#endif

static ::String CharMenu_obj_sMemberFields[] = {
	HX_("selectableCharacters",e0,6a,bc,4b),
	HX_("selectableCharactersNames",c8,28,a6,38),
	HX_("selectableCharactersBGs",2e,f4,a3,56),
	HX_("charOffsets",4a,f9,e9,fe),
	HX_("unlockableChars",9f,f5,95,7a),
	HX_("unlockableCharsNames",a9,49,22,35),
	HX_("unlockableCharsBGs",cf,6a,1c,eb),
	HX_("unlockableCharsOffsets",a1,bd,4d,a4),
	HX_("unlockedCharacters",ad,3a,3f,52),
	HX_("unlockedCharactersNames",db,f1,bd,31),
	HX_("unlockedCharactersBGs",81,42,0d,28),
	HX_("unlockedOffsets",9d,17,7c,17),
	HX_("backgroundFolder",3c,25,27,c4),
	HX_("fontFolder",dd,0d,e4,ad),
	HX_("sharedImagesFolder",cb,23,a4,1b),
	HX_("curSelected",fb,eb,ab,32),
	HX_("icon",79,e7,b2,45),
	HX_("menuBG",24,65,6d,05),
	HX_("grpMenu",24,54,e5,ff),
	HX_("grpMenuImages",fc,cb,c7,90),
	HX_("imageArray",3e,34,5d,31),
	HX_("selectedCharName",bc,59,88,7a),
	HX_("alreadySelected",13,d6,4b,c5),
	HX_("doesntExist",f8,24,fa,eb),
	HX_("ifCharsAreUnlocked",b7,02,fa,84),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("addCharImageOffset",f7,e0,10,44),
	HX_("changeSelection",bc,98,b5,48),
	HX_("charCheck",12,22,0f,ff),
	::String(null()) };

::hx::Class CharMenu_obj::__mClass;

void CharMenu_obj::__register()
{
	CharMenu_obj _hx_dummy;
	CharMenu_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CharMenu",b5,af,6a,7c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CharMenu_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CharMenu_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharMenu_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharMenu_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

